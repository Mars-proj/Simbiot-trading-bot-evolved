digraph TradingBotSystem {
    rankdir=LR;
    node [shape=box, style=filled, fillcolor=lightblue];
    edge [color=blue];

    // Core
    subgraph cluster_core {
        label="Core";
        fillcolor=lightgreen;
        core [label="core.py"];
        start_trading [label="start_trading_all.py"];
        start_trading -> core;
    }

    // Trading
    subgraph cluster_trading {
        label="Trading";
        fillcolor=lightyellow;
        strategies [label="strategies.py"];
        strategy_manager [label="strategy_manager.py"];
        strategy_generator [label="strategy_generator.py"];
        strategy_param_generator [label="strategy_param_generator.py"];
        order_utils [label="order_utils.py"];
        risk_manager [label="risk_manager.py"];
        signal_blacklist [label="signal_blacklist.py"];
        strategy_manager -> strategies;
        strategy_manager -> strategy_generator;
        strategy_manager -> strategy_param_generator;
        strategy_manager -> order_utils;
        strategy_manager -> risk_manager;
        strategy_manager -> signal_blacklist;
        core -> strategy_manager;
    }

    // Exchange
    subgraph cluster_exchange {
        label="Exchange";
        fillcolor=lightcoral;
        exchange_factory [label="exchange_factory.py"];
        exchange_detector [label="exchange_detector.py"];
        exchange_pool [label="exchange_pool.py"];
        symbol_filter [label="symbol_filter.py"];
        exchange_pool -> exchange_factory;
        exchange_pool -> exchange_detector;
        exchange_pool -> symbol_filter;
        core -> exchange_factory;
    }

    // Market Analysis
    subgraph cluster_market_analysis {
        label="Market Analysis";
        fillcolor=lightpink;
        market_state_analyzer [label="market_state_analyzer.py"];
        features [label="features.py"];
        data_utils [label="data_utils.py"];
        market_state_analyzer -> features;
        market_state_analyzer -> data_utils;
        strategy_manager -> market_state_analyzer;
        strategy_manager -> symbol_filter;
    }

    // Machine Learning
    subgraph cluster_ml {
        label="Machine Learning";
        fillcolor=lightcyan;
        ml_data_preparer [label="ml_data_preparer.py"];
        ml_model_trainer [label="ml_model_trainer.py"];
        ml_predictor [label="ml_predictor.py"];
        online_learning [label="online_learning.py"];
        retraining_manager [label="retraining_manager.py"];
        local_model_api [label="local_model_api.py"];
        ml_predictor -> ml_model_trainer;
        ml_predictor -> ml_data_preparer;
        ml_model_trainer -> online_learning;
        retraining_manager -> ml_model_trainer;
        local_model_api -> ml_predictor;
        strategy_manager -> ml_predictor;
    }

    // Optimization
    subgraph cluster_optimization {
        label="Optimization";
        fillcolor=lightgoldenrodyellow;
        genetic_optimizer [label="genetic_optimizer.py"];
        strategy_optimizer [label="learning/strategy_optimizer.py"];
        trade_evaluator [label="learning/trade_evaluator.py"];
        strategy_optimizer -> genetic_optimizer;
        trade_evaluator -> strategy_optimizer;
        strategy_manager -> strategy_optimizer;
    }

    // Backtesting
    subgraph cluster_backtesting {
        label="Backtesting";
        fillcolor=lightgray;
        backtest_cycle [label="backtest_cycle.py"];
        backtest_manager [label="backtest_manager.py"];
        learning_backtester [label="learning/backtester.py\n(Not Working)"];
        ab_testing [label="ab_testing.py"];
        backtest_manager -> backtest_cycle;
        learning_backtester -> backtest_cycle;
        ab_testing -> backtest_cycle;
        strategy_manager -> backtest_manager;
    }

    // Scalability
    subgraph cluster_scalability {
        label="Scalability";
        fillcolor=lightseagreen;
        celery_app [label="celery_app.py"];
        api_server [label="api_server.py"];
        user_manager [label="user_manager.py"];
        notification_manager [label="notification_manager.py"];
        telegram_notifier [label="telegram_notifier.py"];
        logging_setup [label="logging_setup.py"];
        notification_manager -> telegram_notifier;
        celery_app -> backtest_manager;
        celery_app -> retraining_manager;
        celery_app -> core;
        api_server -> core;
        user_manager -> api_server;
        core -> notification_manager;
    }

    // Utilities
    subgraph cluster_utilities {
        label="Utilities";
        fillcolor=lightsalmon;
        utils [label="utils.py"];
    }

    // Documentation
    subgraph cluster_documentation {
        label="Documentation";
        fillcolor=lavender;
        architecture_md [label="ARCHITECTURE.md"];
        roadmap_md [label="ROADMAP.md"];
        improvements_md [label="IMPROVEMENTS.md"];
        future_improvements [label="future_improvements.md"];
        project_map_md [label="project_map*.md"];
        docs [label="docs/*"];
    }
}
